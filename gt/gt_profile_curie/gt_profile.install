<?php
use Drupal\taxonomy\Entity\Term;

function gt_profile_install() {
  /**
   * The basics
   */

  // First, do everything in standard profile.
  include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
  standard_install();

  // Set the GT 3.x Theme as the Default Theme and the Seven Theme as the Admin Theme
  $themes = \Drupal::service('config.factory')->getEditable('system.theme');
  $themes->set('default', 'curie');
  $themes->set('admin', 'seven');
  $themes->save();

  // Set User Creation Option to Administrators Only
  \Drupal::service('config.factory')
    ->getEditable('user.settings')
    ->set('register', 'admin_only')
    ->save();

  // Disable Personal Contact Forms
  \Drupal::service('config.factory')
    ->getEditable('contact.settings')
    ->set('user_default_enabled', 'false')
    ->save();



  /**
   * Install a bunch of modules
   */

  // TODO: This needs some sort of error handling; Can't just not install things
  // that are required.

  // Install Datetime Range
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/admin_toolbar/admin_toolbar.module')) {
    \Drupal::service('module_installer')->install(['admin_toolbar']);
  }

  // Install Datetime Range
  if (file_exists(DRUPAL_ROOT . '/core/modules/datetime_range/datetime_range.module')) {
    \Drupal::service('module_installer')->install(['datetime_range']);
  }

  // Install Faq Field
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/faqfield/faqfield.module')) {
    \Drupal::service('module_installer')->install(['faqfield']);
  }

  // Install Field Formatter Class
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/field_formatter_class/field_formatter_class.module')) {
    \Drupal::service('module_installer')->install(['field_formatter_class']);
  }

  // Install Field Group
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/field_group/field_group.module')) {
    \Drupal::service('module_installer')->install(['field_group']);
  }

  // Install the Footer Daemon
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/gt_tools/modules/gt_footerdaemon/gt_footerdaemon.module')) {
    \Drupal::service('module_installer')->install(['gt_footerdaemon']);
  }

  // Install Mercury Reader
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/hg_reader/hg_reader.module')) {
    \Drupal::state()->set('hg_reader_bypass_redirect', TRUE);
    \Drupal::service('module_installer')->install(['hg_reader']);
  }

  // Install Layout Builder
  if (file_exists(DRUPAL_ROOT . '/core/modules/layout_builder/layout_builder.module')) {
    \Drupal::service('module_installer')->install(['layout_builder']);
  }

  // Install Layout Builder Modal
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/layout_builder_modal/layout_builder_modal.module')) {
    \Drupal::service('module_installer')->install(['layout_builder_modal']);
  } else {
    \Drupal::logger('installer')->notice('module not found');
  }

  // Install Layout Builder Restrictions
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/layout_builder_restrictions/layout_builder_restrictions.module')) {
    \Drupal::service('module_installer')->install(['layout_builder_restrictions']);
  }

  // Install Layout Discovery
  if (file_exists(DRUPAL_ROOT . '/core/modules/layout_discovery/layout_discovery.module')) {
    \Drupal::service('module_installer')->install(['layout_discovery']);
  }

  // Install Pathauto
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/pathauto/pathauto.module')) {
    \Drupal::service('module_installer')->install(['pathauto']);
  }

  // Install Telephone
  if (file_exists(DRUPAL_ROOT . '/core/modules/telephone/telephone.module')) {
    \Drupal::service('module_installer')->install(['telephone']);
  }

  // Install Video Embed Field
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/video_embed_field/video_embed_field.module')) {
    \Drupal::service('module_installer')->install(['video_embed_field']);
  }

  // Install GT Tools
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/gt_tools/gt_tools.module')) {
    \Drupal::service('module_installer')->install(['gt_tools']);
  }

  // Install Social Media Links
  if (file_exists(DRUPAL_ROOT . '/modules/contrib/social_media_links/social_media_links.module')) {
    \Drupal::service('module_installer')->install(['social_media_links']);
  }



  /**
   * Install a bunch of configs that rely on the above modules.
   */

  // Post-install configuration setup
  $config_dir = DRUPAL_ROOT . '/profiles/contrib/gt_profile_curie/config/post-install';
  $special_dir = DRUPAL_ROOT . '/profiles/contrib/gt_profile_curie/config/special';

  // Post-install configuration
  $files = glob($config_dir . '/*.yml');
  $source = new \Drupal\Core\Config\FileStorage($config_dir);
  $config_storage = \Drupal::service('config.storage');
  foreach ($files as $file) {
    $components = explode(DIRECTORY_SEPARATOR, $file);
    $config_name = str_replace('.yml', '', end($components));
    $config_storage->write($config_name, $source->read($config_name));
  }



  /**
   * Set up fields that need storage
   */

  $source = new \Drupal\Core\Config\FileStorage($special_dir);
  $storage = \Drupal::entityTypeManager()->getStorage('field_storage_config');

  $storage->create($source->read('field.storage.node.layout_builder__layout'))->save();
  $storage->create($source->read('field.storage.block_content.field_height'))->save();
  $storage->create($source->read('field.storage.block_content.field_percentage'))->save();
  $storage->create($source->read('field.storage.block_content.field_quote'))->save();
  $storage->create($source->read('field.storage.block_content.field_video_url'))->save();

  /**
   * This has to be handled differently because apparently field storage for
   * text lists is formatted differently than for the widgets. Stupid but true.
   */
  $snowflakes = array(
    'field.storage.block_content.field_image_style',
    'field.field.block_content.image_with_copy.field_image_style',
    'field.storage.block_content.field_link_styling',
    'field.field.block_content.custom_links.field_link_styling',
    'field.storage.block_content.field_size',
    'field.field.block_content.spacer.field_size',
    'field.storage.block_content.field_text_alignment',
    'field.field.block_content.call_to_action.field_text_alignment',
    'field.field.block_content.image_with_copy.field_text_alignment',
  );
  foreach ($snowflakes as $config_name) {
    $config_record = $source->read($config_name);

    $entity_type = \Drupal::service('config.manager')->getEntityTypeIdByName($config_name);
    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
    $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
    $entity = $storage->createFromStorageRecord($config_record);
    $entity->save();
  }

  /* No recollection what this is all about... */
  $source = new \Drupal\Core\Config\FileStorage($config_dir);
  \Drupal::service('config.storage')
    ->write('core.entity_view_display.node.page.default', $source->read('core.entity_view_display.node.page.default'));



  /**
   * Here we go. Time to install some taxonomy terms.
   */

  /* COLORS */
  $terms = [
    'Black' => [
      'field_machine_name' => [
        0 => ['value' => 'black'],
      ],
    ],
    'Blue' => [
      'field_machine_name' => [
        0 => ['value' => 'blue'],
      ],
    ],
    'Gold' => [
      'field_machine_name' => [
        0 => ['value' => 'gold'],
      ],
    ],
    'Transparent' => [
      'field_machine_name' => [
        0 => ['value' => 'Transparent'],
      ],
    ],
    'Warm gray' => [
      'field_machine_name' => [
        0 => ['value' => 'warm-gray'],
      ],
    ],
    'White' => [
      'field_machine_name' => [
        0 => ['value' => 'white'],
      ],
    ],
  ];

  foreach ($terms as $name => $fields) {
    Term::create(
      [
        'name' => $name,
        'weight' => 0,
        'vid' => 'gt_colors'
      ],
      $terms[$name])->save();
  }

  /* COLOR THEMES */
  $terms = [
    'Curie Light' => [
      'field_machine_name' => [
        0 => ['value' => 'curie-light'],
      ],
      'field_background_color' => 6,
      'field_button_color' => 1,
      'field_text_background_color' => 6,
      'field_text_color' => 1,
    ],
    'Curie Dark' => [
      'field_machine_name' => [
        0 => ['value' => 'curie-dark'],
      ],
      'field_background_color' => 1,
      'field_button_color' => 3,
      'field_text_background_color' => 1,
      'field_text_color' => 6,
    ],
    'Curie Neutral' => [
      'field_machine_name' => [
        0 => ['value' => 'curie-neutral'],
      ],
      'field_background_color' => 5,
      'field_button_color' => 1,
      'field_text_background_color' => 5,
      'field_text_color' => 1,
    ],
    'Curie Blue' => [
      'field_machine_name' => [
        0 => ['value' => 'curie-blue'],
      ],
      'field_background_color' => 2,
      'field_button_color' => 3,
      'field_text_background_color' => 6,
      'field_text_color' => 2,
    ],
    'Curie Gold' => [
      'field_machine_name' => [
        0 => ['value' => 'curie-gold'],
      ],
      'field_background_color' => 3,
      'field_button_color' => 1,
      'field_text_background_color' => 3,
      'field_text_color' => 1,
    ],
  ];

  foreach ($terms as $name => $fields) {
    Term::create(
      [
        'name' => $name,
        'weight' => 0,
        'vid' => 'style'
      ] + $fields,
      $terms[$name])->save();
  }
}

/*
 * Fix default social media links.
 */

function gt_profile_update_8001() {
  // Update default socmed links
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('block.block.socialmedialinks');
  $socmed = $config->get();
  if ($socmed['settings']['platforms']['facebook']['value'] == 'https://www.facebook.com/georgiatech') {
    $config->set('settings.platforms.facebook.value', 'georgiatech');
    $messages[] = t('Default GT Facebook URL updated.') . '</br>';
  }
  if ($socmed['settings']['platforms']['instagram']['value'] == 'https://instagram.com/georgiatech') {
    $config->set('settings.platforms.instagram.value', 'georgiatech');
    $messages[] = t('Default GT Instagram URL updated.') . '</br>';
  }
  if ($socmed['settings']['platforms']['linkedin']['value'] == 'http://www.linkedin.com/edu/school?id=18158&trk=tyah') {
    $config->set('settings.platforms.linkedin.value', 'edu/school?id=18158&trk=tyah');
    $messages[] = t('Default GT LinkedIn URL updated.') . '</br>';
  }
  if ($socmed['settings']['platforms']['twitter']['value'] == 'https://twitter.com/georgiatech') {
    $config->set('settings.platforms.twitter.value', 'georgiatech');
    $messages[] = t('Default GT LinkedIn URL updated.') . '</br>';
  }
  if ($socmed['settings']['platforms']['youtube_channel']['value'] == 'https://www.youtube.com/channel/georgiatech') {
    $config->set('settings.platforms.youtube_channel.value', 'UCFkaWOGpyFBVRf5jEeD_wrA');
    $messages[] = t('Default GT YouTube channel updated.') . '</br>';
  }
  if (empty($messages)) {
    return t('All social media channels have been edited previously. No changes made.');
  } else {
    $config->save(TRUE);
    drupal_flush_all_caches();
    return implode($messages);
  }
}

/**
 * Second hook because 8001 was missing config-save.
 */

function gt_profile_update_8002() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('block.block.socialmedialinks');
  $socmed = $config->get();
  if ($socmed['settings']['platforms']['facebook']['value'] == 'https://www.facebook.com/georgiatech') {
    $config->set('settings.platforms.facebook.value', 'georgiatech');
    $messages[] = t('Default GT Facebook URL updated.') . '</br>';
  }
  if ($socmed['settings']['platforms']['instagram']['value'] == 'https://instagram.com/georgiatech') {
    $config->set('settings.platforms.instagram.value', 'georgiatech');
    $messages[] = t('Default GT Instagram URL updated.') . '</br>';
  }
  if ($socmed['settings']['platforms']['linkedin']['value'] == 'http://www.linkedin.com/edu/school?id=18158&trk=tyah') {
    $config->set('settings.platforms.linkedin.value', 'edu/school?id=18158&trk=tyah');
    $messages[] = t('Default GT LinkedIn URL updated.') . '</br>';
  }
  if ($socmed['settings']['platforms']['twitter']['value'] == 'https://twitter.com/georgiatech') {
    $config->set('settings.platforms.twitter.value', 'georgiatech');
    $messages[] = t('Default GT LinkedIn URL updated.') . '</br>';
  }
  if ($socmed['settings']['platforms']['youtube_channel']['value'] == 'georgiatech') {
    $config->set('settings.platforms.youtube_channel.value', 'UCFkaWOGpyFBVRf5jEeD_wrA');
    $messages[] = t('Default GT YouTube channel updated.') . '</br>';
  }
  if (!empty($messages)) {
    $config->save(TRUE);
    drupal_flush_all_caches();
    return implode($messages);
  }
}

/**
 * CAS6 login update
 */

function gt_profile_update_8003() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('cas.settings');
  $cas = $config->get();
  if ($cas['server']['hostname'] == 'login.gatech.edu') {
    $config->set('server.hostname', 'sso.gatech.edu');
    $config->save(TRUE);
    return t('CAS hostname updated.');
  }
}
